#+TITLE: My Emacs Initialisation File, Written in ~Org-mode~
#+author: Musa Al-hassy
#+email: alhassy@gmail.com
#+DATE: 2018-07-25
#+DESCRIPTION: Configuration file for Emacs usage.
#+STARTUP: indent
#+CATEGORIES: Emacs
#+OPTIONS: html-postamble:nil toc:nil d:nil
#+IMAGE: ../assets/img/emacs_logo.png
#+SOURCE: https://raw.githubusercontent.com/alhassy/dotfiles/master/.emacs.d/init.org
#+PROPERTY: header-args :tangle yes

* Abstract :ignore:
#+begin_center
*Abstract*
#+end_center

Herein I document the configurations I utilise with Emacs.
Of note are:

 ◈ This is a literate programming setup.

 ◈ I have a variety of cosmetics such as showing battery life and flashing upon errors.

 ◈ Production of org-mode ready-to-go skeletons.

 ◈ Utilities for working with org-mode files, namely ~#+KEYWORD: VALUE~ pairs.

As a [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][literate program]] file with [[http://orgmode.org/][Org-mode]], I am ensured optimal navigation
through my ever growing configuration files, ease of usability and reference
for peers, and, most importantly, better maintainability for myself!

⟪ Dear reader when encoutnering a foregin command ~X~ I encourage you to execute ~(describe-symbol 'X)~ ⟫

* Introduction

Why not keep Emac's configurations in the ~~/.emacs~ file?
This is because the Emacs system may explicitly add, or alter, code
in it.

For example, execute the following
 0. ~M-x customize-variable RET line-number-mode RET~
   # (customize-variable 'line-number-mode)
 0. Then press: ~toggle~, ~state~, then ~1~.
 0. Now take a look: ~(find-file "~/.emacs")~
Notice how additions to the file have been created by `custom'.

As such, I've chosen to write my Emacs' initialisation configurations
in a file named ~~/.emacs.d/init.org~: I have a literate configuration which
is then loaded using org-mode's tangling feature.

* What's in, or at the top of, my ~~/.emacs~

We evaluate every piece of emacs-lisp code available here when
Emacs starts up by placing the following at the top of our ~.emacs~ file:
#+BEGIN_SRC emacs-lisp :tangle no
(org-babel-load-file "~/.emacs.d/init.org")
;;
;; My Emacs settings: (find-file "~/.emacs.d/init.org")
#+END_SRC
( I do not generate my ~.emacs~ file from this source code in-fear of
   overriding functionality inserted by ~custom~. )

# Whenever this ~init.org~ is loaded by org-babel it creates a ~.emacs~ file which
Our ~.emacs~ should be byte-compiled so that when we start Emacs it will
automatically determine if the ~init.org~ file has changed and if so it
would tangle it producing the ~init.el~ file which will then be loaded immediately.

#+BEGIN_SRC emacs-lisp :tangle no
;; In-case I forget to byte-compile!
(byte-compile-file "~/.emacs")

;; Change this silly counter to visualy notice a change. When making many changes.
;; (progn (message "Init.org contents loaded! Counter: 7") (sleep-for 3))
#+END_SRC

Recently I've switched to spacemacs, and to avoid too much migration
I've simply called this literate configuration from within ~~.spacemacs~
via the ~dotspacemacs/user-config~ method.
#+begin_src emacs-lisp :tangle no
(defun dotspacemacs/user-config ()
  "Configuration function for user code.
   This function is called at the very end of Spacemacs initialization after
   layers configuration.
   This is the place where most of your configurations should be done. Unless it is
   explicitly specified that a variable should be set before a package is loaded,
   you should place your code here."

   (org-babel-load-file "~/dotfiles/.emacs.d/init.org")
)
#+end_src

* Version Control

[[http://www.linfo.org/hard_link.html][Soft links]] are pointers to other filenames, whereas hardlinks
are pointers to memory location of a given filename!
Soft links are preferable since they defer to the orginal filename
and can work across servers.

We can declare them as follows,
#+BEGIN_EXAMPLE shell
ln -s source_file myfile
#+END_EXAMPLE

If ~repo~ refers to a directory under version control
--or Dropbox-- we move our init file and emacs directory to it,
then make soft links to these locations so that whenever ~~/.emacs~ 
is accessed it will refer to ~repo/.emacs~ and likewise for ~.emacs.d~ :-)

On a new machine, copy-paste any existing emacs configs we want
to the ~repo~ folder then ~rm -rf ~~/.emacs*~ and then make the soft
links only.

#+BEGIN_EXAMPLE shell
repo=~/Dropbox     ## or my git repository: ~/dotfiles

cd ~

mv .emacs $repo/
ln -s $repo/.emacs .emacs

mv .emacs.elc $repo/
ln -s $repo/.emacs.elc .emacs.elc
          
mv .emacs.d/ $repo/
ln -s $repo/.emacs.d/ .emacs.d
#+END_EXAMPLE
Note the extra ~/~ after ~.emacs.d~!

You may need to unlink soft links if you already have them;
e.g., ~unlink .emacs.d~.

To make another softlink to a file, say in a blogging directory,
we ~cd~ to the location of interest then execute, say:
~ln -s $repo/.emacs.d/init.org init.org~

While we're at it, let's make this super-duper file (and another) easily
accessible --since we'll be altering it often--:
#+BEGIN_EXAMPLE shell
cd ~

ln -s dotfiles/.emacs.d/init.org init.org
ln -s alhassy.github.io/content/AlBasmala.org AlBasmala.org
#+END_EXAMPLE

* Magit & Switching to a new OS

** ~use-package~
Recently I switched to mac --first time trying the OS.
I had to do a few ~package-install~'s and it was annoying.
I'm looking for the best way to package my Emacs installation 
--inlcuding my installed pacakages and configuration--
so that I can quickly install it anywhere, say if I go to another machine.
It seems ~use-package~  allows me to configure and auto install packages. 
On a new machine, when I clone my ~.emacs.d~ and start emacs,
on the first start it should automatically install and compile 
all of my pacakges through ~use-package~ when it detects they're missing.

The ~:ensure~ installs the files using ~package.el~ if need be.

#+BEGIN_SRC emacs-lisp :tangle yes
(package-refresh-contents)        ;; Always stay up to date.

(use-package htmlize :ensure)     ;; Org produced htmls are coloured.
(use-package biblio  :ensure)     ;; Quick BibTeX references, sometimes.

(use-package magit   :ensure)     ;; Efficient version control.
(global-set-key (kbd "C-x g") 'magit-status)

;; (use-package flycheck          ;; Dynamic syntax checking.
;;  :init (global-flycheck-mode) :ensure)

(use-package dash :ensure)    ;; “A modern list library for Emacs”
(use-package s    :ensure)    ;; “The long lost Emacs string manipulation library”.
#+END_SRC

Note:
+ [[https://github.com/magnars/dash.el][dash]]: “A modern list library for Emacs”
  - E.g., ~(--filter (> it 10) (list 8 9 10 11 12))~
+ [[https://github.com/magnars/s.el][s]]: “The long lost Emacs string manipulation library”.
  - E.g., ~s-trim, s-replace, s-join~.

** Magit

Why use ~magit~ as the interface to the git version control system?
In a magit buffer nearly everything can be acted upon:
Press ~return,~ or ~space~, to see details and ~tab~ to see children items, usually.

# Execute ~M-x dired~ to see the contents of a particular directory.
#
Below is my personal quick guide to working with magit.
A quick magit tutorial can be found on [[http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html.html][jr0cket's blog]].

+ ~magit-init~ :: Put a project under version control. 
  The mini-buffer will prompt you for the top level folder version.
  A ~.git~ folder will be created there.

+ ~magit-status~ , ~C-x g~ :: See status in another buffer. Press ~?~ to see options,
     including:
     - ~q~ :: Quit magit, or go to previous magit screen.
     - ~s~ :: Stage, i.e., add, a file to version control.
            Add all untracked files by selecting the /Untracked files/ title.  
     - ~k~ :: Kill, i.e., delete a file locally.
     - ~i~ :: Add a file to the project ~.gitignore~ file. Nice stuff =)
     - ~u~ :: Unstage a specfif staged change highlighed by cursor.
              ~C-u s~ stages everything --tracked or not.
     - ~c~ :: Commit a change.
         * A new buffer for the commit message appears, you write it then
           commit with ~C-c C-c~ or otherwise cancel with ~C-c C-k~.
           These commands are mentioned to you in the minibuffer when you go to commit.
         * You can provide a commit to /each/ altered chunk of text! 
           This is super neat, you make a series of local such commits rather
           than one nebulous global commit for the file. The ~magit~ interface
           makes this far more accessible than a standard terminal approach!
         * You can look at the unstaged changes, select a /region/, using ~C-SPC~ as usual, 
           and commit only that if you want!
         * When looking over a commit, ~M-p/n~ to efficiently go to previous or next altered sections.
         * Amend a commit by pressing ~a~ on ~HEAD~.  
     - ~v~ :: Revert a commit.         
     - ~l~ :: Show the log, another ~l~ for current branch; other options will be displayed.
         - Here ~space~ shows details in another buffer while cursour remains in current
           buffer and, moreover, continuing to press ~space~ scrolls through the other buffer!
           Neato.
     - ~d~ :: Show differences, another ~d~ or another option.
            - This is magit! Each hunk can be acted upon; e.g., ~s~ or ~c~ or ~k~ ;-)
            - [[https://softwareengineering.stackexchange.com/a/119807/185815][The staging area is akin to a pet store; commiting is taking the pet home.]]  
     - ~P~ :: Push.
     - ~F~ :: Pull.
     - ~:~ :: Execute a raw git command; e.g., enter ~whatchanged~.

   The status buffer may be refereshed using ~g~, and all magit buffer by ~G~.
   # E.g., when you make git changes outside of emacs.
   Press ~tab~ to see collaposed items, such as what text has been changed.

Notice that every time you press one of these commands, a ‘pop-up’ of realted git options
appears! Thus not only is there no need to memorize many of them, but this approach makes
discovering other commands easier.

Use ~M-x (magit-list-repositories) RET~ to list local repositories:

Below are the git repos I'd like to clone
(setq magit-clone-set-remote.pushDefault t) ;; Do not ask about this variable when cloning.

#+begin_src emacs-lisp
(defun maybe-clone (remote local)
  "Clone a `remote` repository if the `local` directory does not exist.
    Yields `nil` when no cloning transpires, otherwise yields `cloned-repo`.
  "
  (unless (file-directory-p local) (magit-clone remote local) 'cloned-repo)
)

;; Set variable without asking.
(setq magit-clone-set-remote.pushDefault 't)

(maybe-clone "https://github.com/alhassy/dotfiles" "~/dotfiles")
(maybe-clone "https://github.com/alhassy/alhassy.github.io" "~/alhassy.github.io")
(maybe-clone "https://github.com/alhassy/CheatSheet" "~/CheatSheet")
(maybe-clone "https://github.com/alhassy/ElispCheatSheet" "~/ElispCheatSheet")
(maybe-clone "https://github.com/alhassy/MyUnicodeSymbols" "~/MyUnicodeSymbols")
#+end_src

Let's always notify ourselves of a file that has [[https://tpapp.github.io/post/check-uncommitted/][uncommited changes]]
--we might have had to step away from the computer and forgotten to commit.
#+begin_src emacs-lisp :tangle yes
(require 'magit-git)

(defun my/magit-check-file-and-popup ()
  "If the file is version controlled with git 
  and has uncommitted changes, open the magit status popup."
  (let ((file (buffer-file-name)))
    (when (and file (magit-anything-modified-p t file))
      (message-box "This file has uncommited changes!")
      (magit-status))))

(add-hook 'find-file-hook 'my/magit-check-file-and-popup)

;; Let's try this out.
;; (progn (eshell-command "echo change-here >> ~/dotfiles/.emacs")
;;        (find-file "~/dotfiles/.emacs")
;; )
#+end_src

:TryItOut:
(progn (eshell-command "echo change-here >> ~/dotfiles/.emacs")
       (find-file "~/dotfiles/.emacs")
)
:End:

* Managing Local Variables

It is dangerous to load a file with local variables;
instead we should load files without evaluating locals,
read the locals to ensure they are safe --e.g., there's nothing
malicious like ~eval: (delete-file your-important-file.txt)~--
then revert the buffer to load the locals.

However, when preprocessing my own files I sometimes wish
to accept all locals without being queried and so have these two
combinators.


#+BEGIN_SRC emacs-lisp
;; Accept all local variables versus query for possibly non-safe locals.
(defun DANGER-all-locals () (setq enable-local-variables :all))
(defun SAFE-query-locals () (setq enable-local-variables t))
#+END_SRC

* Loads

** ~package-initialize~: Melpa, gnu, and org

+ *M-x list-packages* to see all melpa packages that can install
  - Not in alphabetical order, so maybe search with ~C-s~.
+ For example to download the haskell mode: ~M-x package-install RET haskell-mode RET~.
  - Or maybe to install ~unicode-fonts~ ;-)
+ Read more at http://ergoemacs.org/emacs/emacs_package_system.html or 
  at https://github.com/milkypostman/melpa

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu" . "https://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
#+END_SRC

# If there are issues with loading the archives,
# say, "Failed to download ‘gnu’ archive."
# then ensure you can both read and write, recursively, to your .emacs.d/
# E.g., within emacs try to execute (package-refresh-contents)
# and you'll observe a permissions error.

** Programming Language Supports

:agda2-include-dirs-Issue:
#+BEGIN_SRC emacs-lisp
; (load (shell-command-to-string "agda-mode locate"))
;;
;; Seeing: One way to avoid seeing this warning is to make sure that agda2-include-dirs is not bound.
; (makunbound 'agda2-include-dirs)
#+END_SRC
:End:

Executing ~agda-mode setup~ appends the following text to the ~.emacs~ file.
Let's put it here ourselves.
#+begin_src emacs-lisp
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
#+end_src

Sometimes I use Coq,
#+begin_src emacs-lisp
;; Open .v files with Proof General's Coq mode
;; (load "~/.emacs.d/lisp/PG/generic/proof-site")
#+end_src

*** COMMENT More Programming Language Support                        :TODO:


instead of mmm-mode, we could use polymode alsong with org;
https://www.reddit.com/r/emacs/comments/50p34n/polymode_is_awesome/

M-x package-install RET polymode
(require 'poly-org)
(poly-org-mode t)
(add-hook 'org-mode-hook 'poly-org-mode)

now a source block automatically turns on the minor mode it needs!

+ other multiple modes: https://www.emacswiki.org/emacs/MultipleModes
+ (!!) https://wiki.haskell.org/Literate_programming#Multi-mode_support_in_Emacs

**** Haskell :tangle no
#+BEGIN_SRC emacs-lisp
;; now C-c C-l interpets the current buffer; will ofcourse need to switch to the ghci buffer
 (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
#+END_SRC

**** Kotlin
#+BEGIN_SRC emacs-lisp  :tangle no
(load "~/.emacs.d/kotlin-mode.el")
(setq kotlin-tab-width 2)
#+END_SRC

**** Lambda Prolog 
#+BEGIN_SRC emacs-lisp  :tangle no
(load "/usr/local/packages/teyjus/emacs/teyjus.el")
(setq tjcc "/usr/local/packages/teyjus/tjcc")
#+END_SRC
**** haskell setups
  ;; (let ((my-cabal-path (expand-file-name "~/Library/Haskell/bin")))
  ;;   (setenv "PATH" (concat my-cabal-path path-separator (getenv "PATH")))
  ;;   (add-to-list 'exec-path my-cabal-path))
  ;; (custom-set-variables '(haskell-tags-on-save t)) ;; M-. jump to definition (needs Cabal project)
  ;; (add-hook 'haskell-mode-hook #'hindent-mode)  ;; M-q to reformat current declaration
  ;; (eval-after-load 'haskell-mode
  ;;   '(define-key haskell-mode-map [f9] 'haskell-navigate-imports)) ;; M-x eval-buffer then F8 moves to imports and C-c C-, formats

  ;; ;; mmm-mode for literate haskell
  ;; ;; (setq auto-mode-alist
  ;; ;;       (remove
  ;; ;;        (rassoc 'literate-haskell-mode auto-mode-alist) auto-mode-alist))
  ;; (add-to-list 'auto-mode-alist '("\\.lhs$" . latex-mode))

  ;; ;; removes literate-haskell mode activation for lhs files and addes mmm-mode
  ;; (require 'mmm-auto)
  ;; (add-hook 'literate-haskell-mode 'my-mmm-mode) ;; this doesn't work
  ;; (defun my-mmm-mode ()
  ;;   ;; go into mmm minor mode when class is given
  ;;   (make-local-variable 'mmm-global-mode)
  ;;   (setq mmm-global-mode 't)
  ;;   (latex-mode)
  ;;   (mmm-mode-on)
  ;;   (setq mmm-submode-decoration-level 1)
  ;;   (mmm-ify-by-class 'literate-haskell-latex))

  ;; (mmm-add-classes
  ;;  '((literate-haskell-latex
  ;;     :submode haskell-mode
  ;;     :front "^\\\\begin{code}\n"
  ;;     :back "^\\\\end{code}"
  ;;     )))
  ;; (setq mmm-parse-when-idle 't) ;; re-fontify submode portions when idle
  ;; (eval-after-load "latex"
  ;;   '(progn
  ;;      (add-to-list 'LaTeX-command-style '("lhs" "lhslatex"))
  ;;      (add-to-list 'TeX-file-extensions "lhs")
  ;;      (setq TeX-command-extra-options "-shell-escape")))

  ;; ;; ghc-mod (Note: seperate mode from haskell-mode)
  ;; (require 'company)
  ;; (add-hook 'haskell-mode-hook 'company-mode)
  ;; (autoload 'ghc-init "ghc" nil t)
  ;; (autoload 'ghc-debug "ghc" nil t)
  ;; (add-hook 'haskell-mode-hook (lambda ()
  ;;                                (ghc-init)
  ;;                                ;; haskell company-mode (works with ghc-mod)
  ;;                                (add-to-list (make-local-variable 'company-backends) 'company-ghc)
  ;;                                (custom-set-variables '(company-ghc-show-info t))))

  ;; ;; company ghci
  ;; (require 'company-ghci)
  ;; (push 'company-ghci company-backends)
  ;; (add-hook 'haskell-mode-hook 'company-mode)

  ;; ;;; To get completions in the REPL
  ;; (add-hook 'haskell-interactive-mode-hook 'company-mode)

  ;; intero - TODO consider removing ghc-mod and company ghci
  (require 'intero)
  (add-hook 'haskell-mode-hook 'intero-mode)
  (add-hook 'literate-haskell-mode-hook 'intero-mode)
  ;; needed to fix bug when loading stack ghci for > 8.2
  (setq haskell-process-args-ghci
        '("-ferror-spans" "-fshow-loaded-modules"))

  (setq haskell-process-args-cabal-repl
        '("--ghc-options=-ferror-spans -fshow-loaded-modules"))

  (setq haskell-process-args-stack-ghci
        '("--ghci-options=-ferror-spans -fshow-loaded-modules"
          "--no-build" "--no-load"))

  (setq haskell-process-args-cabal-new-repl
        '("--ghc-options=-ferror-spans -fshow-loaded-modules"))
**** magit                                                          :TODO:

  (setq-default git-magit-status-fullscreen t)
  (global-git-commit-mode t) ;; edit git commit messages through emacs
  )
** Unicode Input via Agda Input        
I almost always want the ~agda-mode~ input method.

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'agda-input)
(add-hook 'text-mode-hook (lambda () (set-input-method "Agda")))
(add-hook 'org-mode-hook (lambda () (set-input-method "Agda")))
#+END_SRC

:agda2_program_args:
    "+RTS   -H4.5G   -M4.5G   -K256M   -S/tmp/AgdaRTS.log   -A1G   -RTS   -i   ."
:end:

Below are my personal Agda input symbol translations;
e.g., ~\set → 𝒮ℯ𝓉~. Note that we could give a symbol new Agda TeX binding
interactively: ~M-x customize-variable agda-input-user-translations~ then
~INS~ then for key sequence type ~set~ then ~INS~ and for string paste ~𝒮ℯ𝓉~.

#+BEGIN_SRC emacs-lisp :tangle yes
;; category theory
(add-to-list 'agda-input-user-translations '("set" "𝒮ℯ𝓉"))
(add-to-list 'agda-input-user-translations '("alg" "𝒜𝓁ℊ"))
(add-to-list 'agda-input-user-translations '("split" "▵"))
(add-to-list 'agda-input-user-translations '("join" "▿"))
(add-to-list 'agda-input-user-translations '("adj" "⊣"))
(add-to-list 'agda-input-user-translations '(";;" "﹔"))
(add-to-list 'agda-input-user-translations '(";;" "⨾"))
(add-to-list 'agda-input-user-translations '(";;" "∘"))

;; lattices
(add-to-list 'agda-input-user-translations '("meet" "⊓"))
(add-to-list 'agda-input-user-translations '("join" "⊔"))

;; residuals
(add-to-list 'agda-input-user-translations '("syq"  "╳"))
(add-to-list 'agda-input-user-translations '("over" "╱"))
(add-to-list 'agda-input-user-translations '("under" "╲"))
        ;; Maybe “\\” shortcut?

;; Z-quantification range notation, e.g., “∀ x ❙ R • P”
(add-to-list 'agda-input-user-translations '("|" "❙"))

;; adjunction isomorphism pair
(add-to-list 'agda-input-user-translations '("floor"  "⌊⌋"))
(add-to-list 'agda-input-user-translations '("lower"  "⌊⌋"))
(add-to-list 'agda-input-user-translations '("lad"    "⌊⌋"))
(add-to-list 'agda-input-user-translations '("ceil"   "⌈⌉"))
(add-to-list 'agda-input-user-translations '("raise"  "⌈⌉"))
(add-to-list 'agda-input-user-translations '("rad"    "⌈⌉"))

;; silly stuff
;;
;; angry, cry, why-you-no
(add-to-list 'agda-input-user-translations 
   '("whyme" "ლ(ಠ益ಠ)ლ" "ヽ༼ಢ_ಢ༽ﾉ☂" "щ(゜ロ゜щ)")) 
;; confused, disapprove, dead, shrug
(add-to-list 'agda-input-user-translations 
   '("what" "「(°ヘ°)" "(ಠ_ಠ)" "(✖╭╮✖)" "¯\\_(ツ)_/¯"))
;; dance, csi
(add-to-list 'agda-input-user-translations 
   '("cool" "┏(-_-)┓┏(-_-)┛┗(-_-﻿ )┓" "•_•)
( •_•)>⌐■-■
(⌐■_■)
"))
;; love, pleased, success, yesss
(add-to-list 'agda-input-user-translations 
   '("smile" "♥‿♥" "(─‿‿─)" "(•̀ᴗ•́)و" "(งಠ_ಠ)ง"))
#+END_SRC

# If you change this setting manually, without using the
# customization buffer, you need to call (agda-input-setup) in
# order for the change to take effect.
Finally let's effect such translations.
#+begin_src emacs-lisp :tangle yes
;; activate translations
(agda-input-setup)
#+end_src

Note that the effect of [[http://ergoemacs.org/emacs/emacs_n_unicode.html][Emacs unicode input]] could be approximated using
~abbrev-mode~.

:May_need_to_install_stix_font:
;; install STIX font from Ubuntu store!!
;; (set-fontset-font t 'unicode (font-spec :name "STIX") nil 'append)
:End:

** COMMENT Folding mode :rarely_use_this:

#+BEGIN_SRC emacs-lisp  :tangle no
; (load "~/.emacs.d/folding-mode.el")
; (folding-mode-add-find-file-hook)
#+END_SRC
*** COMMENT folding mode local variables

I occasionally use a folding mode, due to work, so I append the following
to the files that utilise it.

 Local Variables:
 eval: (folding-mode t)
 folded-file: t
 eval: (fold-set-marks ";;{{{ " ";;}}}")
 eval: (fold-whole-buffer)
 fold-internal-margins: 0
 end:

* Cosmetics
😃
#+begin_src emacs-lisp
;; (load-theme 'spacemacs-dark)
(load-theme 'spacemacs-light)
#+end_src

:ExperimentingWithBackgroundColours: 
#+begin_src emacs-lisp
;; try background colour for html:  ---nice soft yellow, pleasing--- 
;;
(add-to-list 'default-frame-alist '(background-color . "#fcf4dc"))
;; maybe not idea for spacemacs

(visual-line-mode t)
#+end_src

(set-background-color "white")
(set-background-color "#eae3cb")   -- a bit dark
(set-background-color "#fcf4dc")   -- nice!
:End:

** Column Marker

(  Maybe a hook would be better? Much better...? )

Have a thin line to the right to ensure I don't write “off the page”.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package fill-column-indicator :ensure)
(define-globalized-minor-mode my-fci-global-mode fci-mode
  (lambda () (set-fill-column 90) (fci-mode 't)
))
(my-fci-global-mode 1)
#+END_SRC

There are issues with making things global.
In this case, exporting to html produces curious symbols
thereby prompting ~my-org-html-export-to-html~ below to
take care of this.

** COMMENT My global visual line mode                       :no_longer_used:
*No longer used* Using fill-column-mode instead.

#+BEGIN_SRC emacs-lisp :tangle no
(define-globalized-minor-mode my-visual-line-global-mode visual-line-mode
  (lambda () 
  
    ;; Wrap words in all buffers
    (visual-line-mode t)

))
(my-visual-line-global-mode 1)
#+END_SRC
# What I like about truncate-lines versus visual-line-mode is that the former doesn’t split
# on word boundaries and adds symbols to the fringe.
# (set-default 'truncate-lines t)

** Flashing when something goes wrong
Make top and bottom of screen flash when something unexpected happens thereby observing a warning message in the minibuffer. E.g., C-g, or calling an unbound key sequence, or misspelling a word.
#+BEGIN_SRC emacs-lisp
  (setq visible-bell 1)
  ;; Enable flashing mode-line on errors
#+END_SRC

** My TODO list: The initial buffer when Emacs opens up
#+BEGIN_SRC emacs-lisp
;; (setq initial-buffer-choice "~/Dropbox/todo.org")

(progn (split-window-right)			;; C-x 3
(other-window 1)			          ;; C-x 0
(find-file "~/Dropbox/todo.org"))
#+END_SRC
** Showing date, time, and battery life
#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t)
(display-time)
(display-battery-mode 1)
#+END_SRC

** Increase/decrease text size
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
  ;; C-x C-0 restores the default font size
#+END_SRC

** Delete Selection mode
Delete Selection mode lets you treat an Emacs region much like a typical text
selection outside of Emacs: You can replace the active region.
We can delete selected text just by hitting the backspace key.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

* Helpful Functions & Shortcuts

Here is a collection of Emacs-lisp functions that I have come to use in other files.
# The subsections below detail the definitions.

** Bind ~recompile~ to ~C-c C-m~ -- “m” for “m”ake
#+BEGIN_SRC emacs-lisp
(defvar my-keys-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-c C-m") 'recompile)
    map)
  "my-keys-minor-mode keymap.")

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  :init-value t
  :lighter " my-keys")
#+END_SRC
** Reload buffer with ~f5~ 
I do this so often it's not even funny.
#+BEGIN_SRC emacs-lisp
(global-set-key [f5] '(lambda () (interactive) (revert-buffer nil t nil)))
#+END_SRC

In Mac OS, one uses ~Cmd-r~ to reload a page and spacemacs binds buffer reversion to ~Cmd-u~
--in Emacs, Mac's ~Cmd~ is referred to as the ‘super key’ and denoted ~s~.

** Kill to start of line
Dual to ~C-k~,
#+BEGIN_SRC emacs-lisp
;; M-k kills to the left
(global-set-key "\M-k" '(lambda () (interactive) (kill-line 0)) )
#+END_SRC
** ~file-as-list~ and ~file-as-string~

#+BEGIN_SRC emacs-lisp
(defun file-as-list (filename)
  "Return the contents of FILENAME as a list of lines"
  (with-temp-buffer
    (insert-file-contents filename)
    (split-string (buffer-string))))

(defun file-as-string (filename)
  "Return the contents of FILENAME as a list of lines"
  (with-temp-buffer
    (insert-file-contents filename)
    (buffer-string)))
#+END_SRC

** ~kill-other-buffers~
#+BEGIN_SRC emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

** ~create-scratch-buffer~
#+BEGIN_SRC emacs-lisp
;; A very simple function to recreate the scratch buffer:
;; ( http://emacswiki.org/emacs/RecreateScratchBuffer )
(defun create-scratch-buffer nil
   "create a scratch buffer"
   (interactive)
   (switch-to-buffer (get-buffer-create "*scratch*"))
   (lisp-interaction-mode))   
#+END_SRC
** Switching from 2 horizontal windows to 2 vertical windows
I often find myself switching from a horizontal view of two windows in Emacs to a
vertical view. This requires a variation of ~C-x 1 RET C - x 3 RET C-x o X-x b RET~. 
Instead I now only need to type ~C-|~ to make this switch.
#+BEGIN_SRC emacs-lisp
(defun ensure-two-vertical-windows () 
  "hello"
 (interactive)
 (other-window 1)			;; C-x 0
 (let ((otherBuffer (buffer-name))) 
   (delete-window)			;; C-x 0
   (split-window-right)			;; C-x 3
   (other-window 1)			;; C-x 0
   (switch-to-buffer otherBuffer)	;; C-x b RET
 )
 (other-window 1)
)
(global-set-key (kbd "C-|") 'ensure-two-vertical-windows)
#+END_SRC
** Making then opening html's from org's
#+BEGIN_SRC emacs-lisp 
(defun my-org-html-export-to-html ()
 "Make an html from an org file then open it in my browser."
 (interactive)
 (org-html-export-to-html)
 (let ((it (concat (file-name-sans-extension buffer-file-name) ".html")))
   (browse-url it)
   (message (concat it " has been opened in Chromium."))
   'success ;; otherwise we obtain a "compiler error".
 ) 
)
#+END_SRC

** ~re-replace-in-file~

#+BEGIN_SRC emacs-lisp
(defun re-replace-in-file (file regex whatDo) "Find and replace a regular expression in-place in a file."

    (find-file file)
    (goto-char 0)
    (let ((altered (replace-regexp-in-string regex whatDo (buffer-string))))
      (erase-buffer)
      (insert altered)
      (save-buffer)
      (kill-buffer)
   )
)
#+END_SRC

Example usage:
#+BEGIN_EXAMPLE emacs-lisp
;; Within mysite.html we rewrite: <h1.*h1>   ↦   <h1.*h1>\n NICE
;; I.e., we add a line break after the first heading and a new word, “NICE”.
(re-replace-in-file "mysite.html"
                    "<h1.*h1>"
                    (lambda (x) (concat x "\n NICE")))
#+END_EXAMPLE

*** ~mapsto~: Simple rewriting for current buffer
#+BEGIN_SRC emacs-lisp
(defun mapsto (this that)
  "In the current buffer make the regular expression rewrite: this ↦ that."
  (let* ((current-location (point))
       ;; Do not alter the case of the <replacement text>.
       (altered (replace-regexp-in-string this (lambda (x) that) (buffer-string) 'no-fixed-case))
       )
      (erase-buffer)
      (insert altered)
      (save-buffer)
      (goto-char current-location)
  )
)
#+END_SRC

** Obtaining Values of ~#+KEYWORD~ Annotations

Org-mode settings are, for the most part, in the form ~#+KEYWORD: VALUE~. Of notable interest
are the ~TITLE~ and ~NAME~ keywords. We use the following ~org-keywords~ function to obtain
the values of arbitrary ~#+THIS : THAT~ pairs, which may not necessarily be supported by native
Org-mode --we do so for the case, for example, of the ~CATEGORIES~ and ~IMAGE~ tags associated with an article.

# Parse org buffer as an elisp structure: https://emacs.stackexchange.com/questions/2869/turn-a-list-or-data-structure-into-an-org-document#
#+BEGIN_SRC emacs-lisp
;; Src: http://kitchingroup.cheme.cmu.edu/blog/2013/05/05/Getting-keyword-options-in-org-files/
(defun org-keywords ()
  "Parse the buffer and return a cons list of (property . value) from lines like: #+PROPERTY: value"
  (org-element-map (org-element-parse-buffer 'element) 'keyword
                   (lambda (keyword) (cons (org-element-property :key keyword)
                                           (org-element-property :value keyword)))))

(defun org-keyword (KEYWORD)
  "Get the value of a KEYWORD in the form of #+KEYWORD: value"
  (cdr (assoc KEYWORD (org-keywords))))
#+END_SRC

Note that capitalisation in a ”#+KeyWord” is irrelevant.

* Spelling
I would like to check spelling by default.
 + ~M-$~ :: Check and correct spelling of the word at point
 + ~M-x ispell-change-dictionary RET TAB~ :: To see what dictionaries are available.

# Emacs includes Flyspell. You must not explicitly install it. If you do so, undo this,
# that is, delete flyspell.el from /Applications/Emacs.app/Contents/Resources/site-lisp. 

Flyspell needs a spell checking tool, which is not included in Emacs. 
We install ~aspell~ spell checker using, say, homebrew via ~brew install aspell~.
Note that Emacs' ~ispell~ is the interface to such a command line spelling utility.
# See available dictionary via ~aspell dicts~.

#+BEGIN_SRC emacs-lisp 
(setq ispell-program-name "aspell")

;; Maybe a hook is better? Much better ...?
(define-globalized-minor-mode my-flyspell-global-mode flyspell-mode
  (lambda () 

    ;; spawns an ispell process
    (flyspell-mode 1)

))
(my-flyspell-global-mode 1)

(setq ispell-dictionary "en_GB") ;; set the default dictionary
#+END_SRC

:Hook_TODO:
Hook for after init?
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
:End:

Let us select a correct spelling merely by clicking on a word.
#+begin_src emacs-lisp
(eval-after-load "flyspell"
  ' (progn
     (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
     (define-key flyspell-mouse-map [mouse-3] #'undefined)) )
#+end_src

Colour incorrect works; default is an underline.
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
(custom-set-faces '(flyspell-incorrect ((t (:inverse-video t)))))
#+END_SRC

:CurrentlyNotWorking:
Set up a thesaurus to avoid unwarranted repetition.
#+BEGIN_SRC emacs-lisp :tangle no
(load "~/dotfiles/.emacs.d/powerthesaurus.el")
(global-set-key (kbd "M-#") 'powerthesaurus-lookup-word-at-point)

;; Website currently down ... https://github.com/SavchenkoValeriy/emacs-powerthesaurus/issues/6
#+END_SRC
:End:

Use this game to help you learn to spell words that you're having trouble with;
see ~~/Dropbox/spelling.txt~.
#+BEGIN_SRC emacs-lisp
(autoload 'typing-of-emacs "~/.emacs.d/typing.el" "The Typing Of Emacs, a game." t)
#+END_SRC

* Org-mode related things
** Template expansion (<s Tab, etc.)
In org-mode we type ~<X TAB~ to obtain environment templates, such as ~<s~ for source blocks
or ~<q~ for quote blocks. 
It seems recent [[https://orgmode.org/Changes.html][changes]] to the org-mode structure template expansion
necessitate explicitly loading ~org-tempo~.
#+begin_src emacs-lisp :tangle yes
(require 'org-tempo)
#+end_src

*** ~<el~ Emacs-lisp source blocks

~<el~ to begin an emacs-lisp source block -- ~<e~ is for an example block.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
     '("el" . "src emacs-lisp"))
#+END_SRC

*** ~<ag~ (Org) Agda source template

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
     '("ag" . "src org-agda"))
#+END_SRC
*** ~<ic~ Interactive Way to C source template

#+BEGIN_SRC emacs-lisp
 (add-to-list 'org-structure-template-alist
      '("ic" . "src c :tangle (currently-working-with \"name\")"))
#+END_SRC

*** ~<ich~ Interactive Way to C header template

#+BEGIN_SRC emacs-lisp
 (add-to-list 'org-structure-template-alist
      '("ich" . "src c :tangle (currently-working-with-header \"name\")"))
#+END_SRC

*** ~<ver~ Verbatim template

 #+BEGIN_SRC emacs-lisp
 (add-to-list 'org-structure-template-alist
      '("ver" . "verbatim"))
 #+END_SRC

*** COMMENT TODO Demoing Dot Graphs
We include one to demo the capabilities of the previous subsection.

#+BEGIN_SRC emacs-lisp
;; Graphviz: Press <g-TAB to obtain a minimal editable example.
(add-to-list 'org-structure-template-alist
        '("g" "#+begin_src dot :results output graphics :file \"/tmp/graph.pdf\" :exports both
   digraph G {
      node [color=black,fillcolor=white,shape=rectangle,style=filled,fontname=\"Helvetica\"];
      A[label=\"A\"]
      B[label=\"B\"]
      A->B
   }\n#+end_src" "<src lang=\"dot\">\n\n</src>"))
#+END_SRC

Here's another example graph,
#+BEGIN_EXAMPLE org
 #+BEGIN_SRC dot :file simple_markov.png :cmdline -Kdot -Tpng
 graph {
   rankdir="UD";
    A -- D;
    A -- B;
    D -- C;
    B -- C;
  }
 #+END_SRC  
#+END_EXAMPLE

*** COMMENT Parallel

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("p" . "parallel latex"))
#+END_SRC

** ~ox-extra~: Using ~:ignore:~ to ignore headings but use the bodies
Use the ~:ignore:~ tag on headlines you'd like to have ignored, 
while not ignoring their content --see [[https://emacs.stackexchange.com/a/17677/10352][here]].
#+BEGIN_SRC emacs-lisp
(load "~/dotfiles/.emacs.d/ox-extra.el")
(ox-extras-activate '(ignore-headlines))
#+END_SRC

** Executing code from ~src~ blocks

For example, to execute a shell command in emacs,
write a ~src~ with a shell command, then ~C-c c-c~ to see the results.
Emacs will generally query you to ensure you're sure about executing the
(possibly dangerous) code block; let's stop that:
#+BEGIN_SRC emacs-lisp
; Seamless use of babel: No confirmation upon execution.
(setq org-confirm-babel-evaluate nil)
#+END_SRC
# To activate this feature, "may" need to set #+PROPERTY: header-args :eval never-export in the beginning or your document

A worked out example can be obtained as follows: ~<g TAB~ then ~C-c C-C~ to make a nice
simple graph --the code for this is in the next section.

Some initial languages we want org-babel to support:
#+BEGIN_SRC emacs-lisp
 (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     ;; (shell	 . t)
     (python . t)
     (haskell . t)
     (ruby	 . t)
     (ocaml	 . t)
     (dot	 . t)
     (latex	 . t)
     (org	 . t)
     (makefile	 . t)
     ))

(setq org-src-preserve-indentation t)
#+END_SRC

** org-mode header generation
Generate an untitled org-mode skeleton file ~C-x t~ --similar to ~C-x C-f~ for finding files.

First the template,
# For some reason if I use "org" as source language my variable "thedate"
# is not utilised, hence I'm using emacs-lisp as language.
#
#+NAME: org template 
#+BEGIN_SRC latex :var thedate=(format-time-string "%a %Y-%m-%d") :tangle template.org :exports code
,#+TITLE: ???
,#+DATE: thedate
,#+DESCRIPTION: A new radical entry of things I'm learning!
,#+AUTHOR: Musa Al-hassy
,#+EMAIL: alhassy@gmail.com
,#+IMAGE: ../assets/img/rwh-200.jpg
,#+CATEGORIES: ExampleTags Elisp Haskell Frama-C Specfications Krakatoa
,#+OPTIONS: toc:nil html-postamble:nil 
,# Other possible are num:nil todo:nil pri:nil tags:nil ^:nil
,#+STARTUP: indent

,* Abstract       :ignore:
,#+BEGIN_CENTER 
*Abstract*

This article serves to accomplish *???*.
Write your goal then attempt to realise it, otherwise there's no explicit direction!

,#+END_CENTER

,* Introduction

Let's recall concepts ~X~ needed to discuss notions $Y$.

,* Middle

We're learnin'!

,* Conclusion

Yeah! That was some fun stuff!

,* COMMENT footer

# Local Variables:
# eval: (setq NAME (file-name-sans-extension (buffer-name)))
# eval: (load-file "AlBasmala.el")
# End:
#+END_SRC

Then the functionality,
#+BEGIN_SRC emacs-lisp
(defun new-untitled-org-template ()
  "Produce an org-mode file template."
  (interactive)
  (switch-to-buffer (generate-new-buffer "*Untitled*"))
  (insert (file-as-string "~/.emacs.d/template.org"))
  (org-mode)
)

(global-set-key (kbd "C-x t") 'new-untitled-org-template)
#+END_SRC

** Org-mode cosmetics
#+BEGIN_SRC emacs-lisp
;; org-mode math is now highlighted ;-)
(setq org-highlight-latex-and-related '(latex))

;; Hide the *,=,/ markers
(setq org-hide-emphasis-markers t)

;; (setq org-pretty-entities t) 
;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html
#+END_SRC

** Jumping without hassle

#+BEGIN_SRC emacs-lisp
(defun org-goto-line (line)
  "Go to the indicated line, unfolding the parent Org header.

   Implementation: Go to the line, then look at the 1st previous
   org header, now we can unfold it whence we do so, then we go
   back to the line we want to be at.
  "
  (interactive)
  (goto-line line)
  (org-previous-visible-heading 1)
  (org-cycle)
  (goto-line line)
)
#+END_SRC

** Folding within a subtree

#+BEGIN_SRC emacs-lisp
; https://orgmode.org/manual/Structure-editing.html
; (describe-symbol 'save-excursion)
;
(defun org-fold-current-subtree-anywhere-in-it ()
  "Hide the current heading, while being anywhere inside it."
  (interactive)
  (save-excursion
    (org-narrow-to-subtree)
    (org-shifttab)
    (widen))
)

;; FIXME: Make this buffer specfic!
(global-set-key (kbd "C-c C-h") 'org-fold-current-subtree-anywhere-in-it)
#+END_SRC

* COMMENT Stuff I don't really use, but may want to look at later
** Other fun things

+ ~(nyan-mode)~ Use a cat on a rainbow to indicate the percentage of the buffer position.
   [ Disabled ] 

+ Coloured code delimiters.                 
  #+BEGIN_SRC emacs-lisp :tangle no
(define-globalized-minor-mode my-rainbow-global-mode rainbow-delimiters-mode
  (lambda () (rainbow-delimiters-mode)
))
(my-rainbow-global-mode 1)
#+END_SRC

+ Googling words at point: ~M-x google-this-word~
#+BEGIN_SRC emacs-lisp :tangle no
(require 'google-this)
#+END_SRC

+ *ToDo* Manage, & automate, email from within Emacs using [[https://notmuchmail.org/][Notmuch -- Just an email system]].

*** COMMENT Multiple Cursors                                         :TODO:
  ;; see http://emacsrocks.com/e13.html
  (require 'multiple-cursors)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
*** COMMENT Neotree: Directory Tree Listing                  :neat_may_use: 
  ;; neotree (sidebar for project file navigation)
  (require 'neotree)
  (global-set-key [f8] 'neotree-toggle)
  ;; Enable custom neotree theme
  (doom-themes-neotree-config)  ; all-the-icons fonts must be installed!
** Other cool stuff to look at
#+BEGIN_SRC emacs-lisp :tangle no
;; From Holger Schurig's Emacs configuration

;; Byte-compile local elisp files on save
;;
(defun my-byte-compile-on-save ()
  "Byte-compile an .el file at save time, if it's is in the `user-emacs-directory'."
  (when (and (string= (file-name-directory (buffer-file-name)) (expand-file-name user-emacs-directory))
             (string= (file-name-extension (buffer-file-name)) "el"))
    (byte-compile-file (buffer-file-name) nil)))

(add-hook 'after-save-hook #'my-byte-compile-on-save)

;; Don't load old .elc files when the .el file is newer
(setq load-prefer-newer t)
;(describe-symbol 'load-prefer-newer)

;; (eval-when-compile
;;   ???
;; )
;; 
#+END_SRC
** FIXME keyword

;; "FIXME:" is now a keyword, and so will be highlighted
(font-lock-add-keywords nil
'(("\\<\\(FIXME\\):" 1
font-lock-warning-face t)))
;;
;; Src: https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html#Font-Lock
;; Also: https://stackoverflow.com/a/756856/3550444

** hooks and things
#+BEGIN_SRC emacs-lisp  :tangle no
;; not needed
(defun lagda-extension-whatdo ()
       "What to do when encountering a .lagda file.
       To be added to auto-mode-list."
       (agda2-mode)
       (org-babel-load-file "~/Dropbox/lagda-with-org.org")
       (message "Musa's special Agda settings enabled."))

(add-to-list 'auto-mode-alist '("\\.lagda\\'" . (lambda () (lagda-extension-whatdo))))
; (add-to-list 'auto-mode-alist '("\\.lagda\\'" . 'lagda-extension-whatdo))

(defun my-add-to-multiple-hooks (function hooks) (mapc (lambda (hook) (add-hook hook function)) hooks))
(defun my-common-hook () (fci-mode) (orgstruct-mode) )
(my-add-to-multiple-hooks 'my-common-hook '(text-mode-hook agda2-mode-hook))
#+END_SRC
** Spacemacs gives this -- Highlight parenthesis pair when cursor is near ;-)
#+BEGIN_SRC emacs-lisp
(load-library "paren")
(show-paren-mode 1)
(transient-mark-mode t)
(require 'paren)
#+END_SRC

** Spacemacs gives this -- Minibuffer should display line and column numbers
#+BEGIN_SRC emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+END_SRC

** COMMENT Ido Mode -- in spacemacs, this is no longer needed
Ido, “interactively do things”, mode is used for most commands that require you to select
something from a list: It provides possible completions.
  + An alternative is a third-party tool: =Helm= or ~ivy~.

Extremely helpful for when switching between buffers, =C-x C-b=. Try and be grateful.
#+BEGIN_SRC emacs-lisp
(ido-mode t)
#+END_SRC
** COMMENT tooltip appears by mouse when compilation finishes :havent_used_in_some_time:
from: https://emacswiki.org/emacs/CompileCommand

#+BEGIN_SRC emacs-lisp :tangle no
(defun notify-compilation-result(buffer msg)
  "Notify that the compilation is finished,
close the *compilation* buffer if the compilation is successful,
and set the focus back to Emacs frame"
  (if (string-match "^finished" msg)
    (progn
     (delete-windows-on buffer)
     (tooltip-show "\n Compilation Successful :-) \n "))
    (tooltip-show "\n Compilation Failed :-( \n "))
  (setq current-frame (car (car (cdr (current-frame-configuration)))))
  (select-frame-set-input-focus current-frame)
  )
(add-to-list 'compilation-finish-functions
	     'notify-compilation-result)
#+END_SRC
** COMMENT imenu add to menubar                                       :TODO:
imenu-add-to-menubar! Nice: menu navigation in source file
https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html
https://github.com/bmag/imenu-list
helm-imenu
** COMMENT floating toc material                      :no_longer_using_this:

Add the following to a web-page if you'd like it to have a floating table of contents.
+ Perhaps consider making this a default for all org-files?
 + The ~floatingTocStyle.css~ lives in my Dropbox; bring it here to be self-contained.

#+BEGIN_SRC org :tangle no
#+HTML: <small><center>
( Please remember that you can always access a section using the floating table of contents at the upper-right corner of your screen. )
#+HTML: </center></small>
#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"floatingTocStyle.css\" />
#+HTML: <div id=\"toc\"> &nbsp;Table of Contents&nbsp; <small> <div id=\"full\">
#+TOC: headlines 2
#+HTML: </div> </small> </div>
#+END_SRC

** COMMENT org-html-postamble-format
 Look at the super short doc to know how to manipulate this variable.
 (describe-symbol 'org-html-postamble-format)

 #+BEGIN_SRC emacs-lisp :tangle no
(defun make-html-link (url identifier)
  (concat "<a href=\"" url "\">" identifier "</a>"))

(setq org-html-postamble-format 
  (let* ((nomorg (buffer-name))
         (nom    (file-name-sans-extension nomorg))
         (src    (make-html-link nomorg "Org Source"))
         (nompdf (concat nom ".pdf"))
         (pdf    (make-html-link nompdf "View me as a PDF"))
        )
`(("en" ,(concat "<center> Last modified on %C ; " pdf " ; " src " ; Contact me at %e </center>"))))
)
 #+END_SRC
** COMMENT more org mode configs


  (with-eval-after-load 'org
    ;; inline images in org-mode
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
    (add-hook 'org-mode-hook 'org-display-inline-images)
    ;; make org-formula inline rendering bigger
    (setq org-latex-create-formula-image-program 'imagemagick)
    (setq org-format-latex-options
          (quote
           (:foreground "#90ee90" :background default :scale 2.0 :html-foreground default :html-background "Transparent" :html-scale 1 :matchers
                        ("begin" "$1" "$" "$$" "\\(" "\\["))))
    ;; forgo org-mode code eval confirmation
    (setq org-confirm-babel-evaluate nil)
    )

*** Minted
Execute the following for bib ref as well as minted
Org-mode uses the Minted package for source code highlighting in PDF/LaTeX
--which in turn requires the pygmentize system tool.
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "biber %b"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
)
#+END_SRC

For faster pdf generation, may consider invoking:
#+begin_example emacs-lisp 
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_example

** to-consider-for-magit-list-repositories

The above mechanism suffices, the following needn't be followed with ... unless desired

#+begin_src emacs-lisp :tangle no
(add-to-list 'magit-repository-directories '("~/dotfiles"          . 0))
(add-to-list 'magit-repository-directories '("~/alhassy.github.io" . 0))
(add-to-list 'magit-repository-directories '("~/MyUnicodeSymbols"  . 0))
(add-to-list 'magit-repository-directories '("~/CheatSheet"        . 0))
(add-to-list 'magit-repository-directories '("~/ElispCheatSheet"   . 0))

;; Likely want to put a hook when closing emacs, or at some given time,
;; to show me this buffer so that I can ‘push’ if I haven't already!
;
; (magit-list-repositories)

(progn (eshell-command "echo change-here >> ~/ElispCheatSheet/CheatSheet.org")
       (magit-anything-modified-p t "~/ElispCheatSheet")
       (magit-status "~/ElispCheatSheet/CheatSheet.org")
)

(dolist (file (directory-files "~/ElispCheatSheet") nil)
     (magit-refresh)
     (when (magit-anything-modified-p t file)
       (message-box (format "%s" file)) )
)

(describe-symbol 'magit-list-repositories)

(magit-repo-list-mode

(catch 'break
  (dolist (repo magit-repository-directories nil)

  )))

(defun tangle-commit-load ()
  (interactive)
  (save-excursion
    (widen)
    (save-buffer)
    (org-babel-tangle)
    (magit-stage-modified)
    (magit-commit-create)
    (load-file user-init-file)
    (delete-other-windows)))
#+end_src

* Summary of Utilities Provided

| _Command_                                | _Action_                                            |
| ~C-c C-m~                                | recompile file                                    |
| ~<f5>~                                   | revert buffer                                     |
| ~M-x k~                                  | kill to start of line                             |
| ~C-∣~                                    | toggle 2 windows from horizontal to vertical view |
| ~(file-as-list   pathHere)~              | construe a file as a list of lines                |
| ~(file-as-string pathHere)~              | construe a file as a string                       |
| (~re-replace-in-file file regex whatDo)~ | perform an in-file regular expression rewrite     |
| ~(mapsto this that)~                     | regex rewrite in current buffer: this ↦ that      |
| ~M-x create-scratch-buffer~              | --self evident--                                  |
| ~M-x kill-other-buffers~                 | --self evident--                                  |
| ~M-$~                                    | check spelling of word at point                   |
| ~M-#~                                    | thesaurus look-up word at point                   |
| ~(DANGER-all-locals)~                    | accept, evaluate, all local variables             |
| ~(SAFE-query-locals)~                    | query whether local variables should be evaluated |
| ~C-+/-~                                  | increase/decrease text size                       |
| ~M-x my-org-html-export-to-html~         | make then open html from an org file              |
| ~C-c C-c~                                | execute code in an org ~src~ block                  |
| ~<E~                                     | produce an emacs-lisp ~src~ block                   |
| ~<g~                                     | produce a graph template ~src~ block                |
| ~C-x t~                                  | open a new untitled org template file             |
| ~(org-keywords)~                         | get ~#+Property: Value~ pairs from an org file      |
| ~(org-keyword property)~                 | get the ~value~ of a given org ~#+property~           |

Some possibly interesting reads:
  + Karl Voit's article [[https://karl-voit.at/2017/06/03/emacs-org/][My Emacs Configuration In Org-mode]]; his init file can be found [[https://github.com/novoid/dot-emacs][here]].
  + Holger Schuri's article [[http://www.holgerschurig.de/en/emacs-init-tangle/][Efficient Emacs .org ➞ .el tangling]] 
    ; his init file can be found [[https://bitbucket.org/holgerschurig/emacsconf/src/b06a0f394b9f20cd4e00cfc5a24f7f59db4ba376/config.org?at=master&fileviewer=file-view-default][here]].
  + Arnaud Legrand's article [[http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php][Emacs init file written in org-mode]]
  + [[https://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][Stackexchange: Using org-mode to structure config files]]  
  + [[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][A tutorial on evaluating code within ~src~ blocks]]

* COMMENT footer

;; Kill process buffer without confirmation.
(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

(org-babel-load-file "~/.emacs.d/init.org")
(org-babel-load-file "~/dotfiles/.emacs.d/init.org")

Read: https://github.com/serras/emacs-haskell-tutorial/blob/master/tutorial.md#haskell-preliminaries

# Local Variables:
# eval: (visual-line-mode t)
# eval: (when nil (load-file "~/alhassy.github.io/content/AlBasmala.el"))
# eval: (when nil (remove (concat "../content/" NAMEorg) commitables))
# compile-command: (progn (org-babel-tangle) (byte-compile-file "~/.emacs") (load-file "~/.emacs") (my-org-html-export-to-html))
# End:
