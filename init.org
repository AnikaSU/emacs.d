# السّلام عليكم ─“Hello, and welcome” in Arabic (العربيّة)
#      ~C-x C-s~ is a normal save; whereas
#  ~C-u C-x C-s~ is a save after forming ~init.elc~ and ~README.md~.
#
# TODO: Get rid of folding-mode in-favour of origami?

#+TITLE: A Life Configuring Emacs
#+AUTHOR: Musa Al-hassy
#+EMAIL: alhassy@gmail.com
#+DATE: 2018-07-25
#+DESCRIPTION: My Emacs Initialisation File, Written in Org-mode.
#+STARTUP: indent lognoteclock-out
#+OPTIONS: html-postamble:nil toc:nil d:nil num:t :results nil
#+PROPERTY: header-args :tangle init.el :comments link :results none

# ─AlBasmala keywords─
# DRAFT: yes
#+SOURCEFILE: https://github.com/alhassy/emacs.d/blob/master/init.org
#+IMAGE: ../assets/img/emacs_logo.png
#+CATEGORIES: Emacs Lisp

:Remarks:
(use-package FEATURE :ensure ACTUAL-PACKAGE-NAME)
⇒ When the feature and actual package name differ; e.g.,
  p.el ends with ~(provide 'f) means we need (use-package f : ensure p)

   :bind (:map some-mode-map ("C-a b" . do-the-thing))
≈ (define-key some-mode-map (kbd "C-a b")  'do-the-thing)

  :End:

* Abstract        :ignore:
:PROPERTIES:
:CUSTOM_ID: Abstract
:END:

# See https://shields.io/
#
# https://img.shields.io/badge/<LABEL>-<MESSAGE>-<COLOR>.svg
#
#+BEGIN_export html :tangle to-github?
<p align="center"><img src="emacs-logo.png" width=150 height=150/></p>
#+END_export
#+begin_src emacs-lisp :tangle no :exports results :wrap "export html" :results replace
(concat
"<p align=\"center\">
        <a href=\"https://www.gnu.org/software/emacs/\">
        <img src=\"https://img.shields.io/badge/GNU%20Emacs-" emacs-version "-b48ead.svg?style=plastic\"/></a>
        <a href=\"https://orgmode.org/\"><img src=\"https://img.shields.io/badge/org--mode-" org-version "-489a9f.svg?style=plastic\"/></a>
</p>")
#+end_src

#+RESULTS:
#+begin_export html
<p align="center">
        <a href="https://www.gnu.org/software/emacs/">
        <img src="https://img.shields.io/badge/GNU%20Emacs-26.1-b48ead.svg?style=plastic"/></a>
        <a href="https://orgmode.org/"><img src="https://img.shields.io/badge/org--mode-9.2.5-489a9f.svg?style=plastic"/></a>
</p>
#+end_export

#+begin_center org
*Abstract*
#+end_center

Herein I document the configurations I utilise with [[https://gnu.org/s/emacs][Emacs]].
# After cloning the file, many packages are automatically installed; usually with
# little or no trouble.

As a [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][literate program]] file with [[http://orgmode.org/][Org-mode]], I am ensured optimal navigation
through my ever growing configuration files, ease of usability and reference
for peers, and, most importantly, better maintainability for myself!

Dear reader, when encountering a foregin command ~X~ I encourage you to execute ~(describe-symbol 'X)~, or press ~C-h o~ with the cursor on ~X~.
An elementary Elisp Cheat Sheet can be found [[https://github.com/alhassy/ElispCheatSheet][here]]
and here is a 2-page 3-column [[https://github.com/alhassy/emacs.d/blob/master/CheatSheet.pdf][Emacs Cheat Sheet]] of the bindings
in ~“this”~ configuration.

* Table of Contents  :Github:TOC:
# :Github:QUOTE:TOC_2_org:  ⇒ breaks on github
:PROPERTIES:
:CUSTOM_ID: Table-of-Contents
:END:

- [[#abstract][Abstract]]
- [[#why-emacs][Why Emacs?]]
- [[#booting-up][Booting Up]]
  - [[#emacs-vs-initorg][=~/.emacs= vs. =init.org=]]
  - [[#use-package----the-start-of-initel][=use-package= ---The start of =init.el=]]
  - [[#readme----from-initorg-to-initel][~README~ ---From ~init.org~ to ~init.el~]]

* Why Emacs?
:PROPERTIES:
:CUSTOM_ID: Why-Emacs?
:END:

/Emacs is a flexible platform for developing end-user applications/ --unfortunately it is generally perceived as
merely a text editor. Some people use it specifically for one or two applications.

For example, [[https://www.youtube.com/watch?v=FtieBc3KptU][writers]] use it as an interface for Org-mode and others use it as an interface for version
control with Magit. [[https://orgmode.org/index.html#sec-4][Org]] is an organisation tool that can be used for typesetting which subsumes LaTeX, generating many different
formats --html, latex, pdf, etc-- from a single source, keeping track of [[https://orgmode.org/worg/org-tutorials/index.html#orgff7b885][schedules]] & task management, blogging, habit tracking, personal information management tool, and [[http://orgmode.org/worg/org-contrib/][much more]].
Moreover, its syntax is so [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][natural]] that most people use it without even knowing!
For me, Org allows me to do literate programming: I can program and document at the same time,
with no need to seperate the two tasks and with the ability to generate multiple formats and files from a single file.

#+begin_quote
If you are a professional writer…Emacs outshines all other editing software
in approximately the same way that the noonday sun does the stars.
It is not just bigger and brighter; it simply makes everything else vanish.
—[[http://project.cyberpunk.ru/lib/in_the_beginning_was_the_command_line/][Neal Stephenson]], /In the beginning was the command line/
#+end_quote

Of course Emacs comes with the basic features of a text editor, but it is much more;
for example, it comes with a powerful notion of ‘undo’: Basic text editors have a single stream of undo,
yet in Emacs, we have a tree --when we undo and make new edits, we branch off in our editing stream
as if our text was being version controlled as we type! --We can even switch between such branches!

# Todo: Learn about weaving so that presentation order may differ from code tangeling order.
#
#
#+begin_src emacs-lisp :tangle no
;; Allow tree-semantics for undo operations.
(package-install 'undo-tree)
(global-undo-tree-mode)
(diminish 'undo-tree-mode)

;; Execute (undo-tree-visualize) then navigate along the tree to witness
;; changes being made to your file live!

;; Each node in the undo tree should have a timestamp.
(setq undo-tree-visualizer-timestamps t)

;; Show a diff window displaying changes between undo nodes.
(setq undo-tree-visualizer-diff t)
#+end_src

/Emacs is an extensible editor: You can make it into the editor of your dreams!/
You can make it suited to your personal needs.
If there's a feature you would like, a behaviour your desire, you can simply code that into Emacs with
a bit of Lisp. As a programming language enthusiast, for me Emacs is my default Lisp interpreter
and a customisable IDE that I use for other programming languages
--such as C, Haskell, Agda, Lisp, and Prolog.
Moreover, being a Lisp interpreter, we can alter the look and feel of Emacs live, without having
to restart it --e.g., press ~C-x C-e~ after the final parenthesis of ~(scroll-bar-mode 0)~
to run the code that removes the scroll-bar.

#+begin_quote
/I use Emacs every day. I rarely notice it. But when I do, it usually brings me joy./
─[[https://so.nwalsh.com/2019/03/01/emacs][Norman Walsh]]
#+end_quote

I have used Emacs as an interface for developing [[https://github.com/alhassy/CheatSheet#cheatsheet-examples][cheat sheets]], for making my
blog, and as an application for ‘interactively learning C’. If anything Emacs is
more like an OS than just a text editor --“living within Emacs” provides an
abstraction over whatever operating system my machine has: [[https://www.fugue.co/blog/2015-11-11-guide-to-emacs.html][It's so easy to take
everything with me.]] Moreover, the desire to mould Emacs to my needs has made me
a better programmer: I am now a more literate programmer and, due to Elisp's
documentation-oriented nature, I actually take the time and effort to make
meaningful documentation --even when the project is private and will likely only
be seen by me.

#+begin_quote
/Seeing Emacs as an editor is like seeing a car as a seating-accommodation./ -- [[https://karl-voit.at/2015/10/23/Emacs-is-not-just-an-editor/][Karl Voit]]
#+end_quote
# Comparing Emacs to an editor is like comparing GNU/Linux to a word processor. -- [[https://karl-voit.at/2015/10/23/Emacs-is-not-just-an-editor/][Karl Voit]]

Possibly interesting reads:
+ [[https://sachachua.com/blog/series/a-visual-guide-to-emacs/][How to Learn Emacs: A Hand-drawn One-pager for Beginners / A visual tutorial]]
+ [[http://emacsrocks.com/][Video Series on Why Emacs Rocks]] ---catch the enthusiasm!
+ [[http://ehneilsen.net/notebook/orgExamples/org-examples.html#sec-18][Emacs org-mode examples and cookbook]]
+ [[https://m00natic.github.io/emacs/emacs-wiki.html][An Opinionated Emacs guide for newbies and beyond]]
+ [[https://tuhdo.github.io/emacs-tutor.html][Emacs Mini-Manual, Part I of III]]
  # + The [[http://tuhdo.github.io/emacs-tutor.html#orgheadline63][Emacs Mini Manual]], or
+ [[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][Org and R Programming]] ---a tutorial on literate programming, e.g., evaluating code within ~src~ bloc.
+ Reference cards for [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][GNU Emacs]], [[https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf][Org-mode]], and [[https://github.com/alhassy/ElispCheatSheet/blob/master/CheatSheet.pdf][Elisp]].
+ [[https://www.reddit.com/r/emacs/comments/6fytr5/when_did_you_start_using_emacs/][“When did you start using Emacs” discussion on Reddit]]
+ [[https://david.rothlis.net/emacs/howtolearn.html][“How to Learn Emacs”]]
+ [[https://orgmode.org/index.html#sec-4][The Org-mode Reference Manual]] or [[https://orgmode.org/worg/][Worg: Community-Written Docs]] which includes a [[https://orgmode.org/worg/org-tutorials/index.html][meta-tutorial]].
+ [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A community driven list of useful Emacs packages, libraries and others.
+ [[https://github.com/caisah/emacs.dz][A list of people's nice emacs config files]]
#  + [[https://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][Stackexchange: Using org-mode to structure config files]]

---If eye-candy, a sleek and beautiful GUI, would entice you then consider starting with [[http://spacemacs.org/][spacemacs]].
   Here's a helpful [[https://www.youtube.com/watch?v=hCNOB5jjtmc][installation video]], after which you may want to watch
   [[https://www.youtube.com/watch?v=PVsSOmUB7ic][Org-mode in Spacemacs]] tutorial---

Remember: Emacs is a flexible platform for developing end-user applications; e.g., this configuration file
is at its core an Emacs Lisp program that yields the editor of my dreams
--it encourages me to grow and to be creative, and I hope the same for all who use it;
moreover, it reflects my personality such as what I value and what I neglect in my workflow.

# why emacs ---not marching to someone-else's tune!
#+begin_quote org
/I’m stunned that you, as a professional software engineer, would eschew inferior computer languages that hinder your ability to craft code,
/but you put up with editors that bind your fingers to someone else’s accepted practice. --- [[http://www.howardism.org/Technical/Emacs/why-emacs.html][Howard Abrams]]
#+end_quote

 *The Power of Text Manipulation:*
 Emacs has ways to represent all kinds of information as text.

 E.g., if want to make a regular expression rename of files in a directory,
 there's no need to learn about a batch renaming tool: ~M-x dired <RET> M-x wdired-change-to-wdired-mode~ now simply perform a /usual/ find-and-replace, then
 save with the /usual/ ~C-x C-s~ to effect the changes!

 Likewise for other system utilities and services (•̀ᴗ•́)و

Moreover, as will be shown below, you can literally use [[https://github.com/zachcurry/emacs-anywhere/#usage][Emacs anywhere]]
for textually input in your operating system --no copy-paste required.

*Keyboard Navigation and Alteration* Suppose you wrote a paragraph of text, and
wanted to ‘border’ it up for emphasies in hypens. Using the mouse to navigate
along with a copy-paste of the hypens is vastely inferior to the incantation ~M-{
C-u 80 - RET M-} C-u 80 - RET~.  If we want to border up the previous 𝓃-many
paragraphs, we simply prefix ~M-{,}~ above with ~C-u 𝓃~ ---a manual approach would
have us count 𝓃 and slowly scroll.  ( Exercise: What incantation of keys
‘underlines’ the current line with /only/ the necessary amount of dashes?
---Solution in the source file. )
# =C-a C-k C-y RET C-y C-SPC C-a C-M-% . RET - RET !=

Finally, here's some fun commands to try out:
+ ~M-x doctor~ ---generalising the idea of rubber ducks
+ ~M-x tetris~  or ~M-x gomoku~ or ~M-x snake~---a break with a classic
  - ~C-u 𝓃 M-x hanoi~ for the 𝓃-towers of Hanoi
+ ~M-x butterfly~ ---in reference to [[https://xkcd.com/378/][“real programmers”]]

* TODO COMMENT Gibberish: Why a monolithic configuration?
Why am I keeping my entire configuration
---from those involving cosmetics & prose to those
of agendas & programming--- in one file?
Being monolithic ---“a large, mountain-sized, indivisible block
of stone”--- is generally not ideal in nearly any project: E.g.,
a book is split into chapters and a software is partitioned into
modules. Using Org-mode, we can still partition our setup while remaining in one
file. An Emacs configuration is a personal leisurely project,
and one file is a simple architecture: I don't have to worry about
many files and the troubles of moving content between them; instead,
I have headings and move content almost instantenously ---org-refile by pressing ~w~ at
the start of the reader---. Moreover, being one file, it is easy to
distribute and to extract artefacts from it ---such as the README for Github,
the HTML for my blog, the colourful PDF rendition, and the all-important Emacs
Lisp raw code file. Moreover, with a single ~#~ I can quickly comment out whole
sections,
thereby momentarily disabling features.

The only reason I would use multiple files for setting up my editor
would be if I did not have a literate programming environment; i.e., Org-mode.

Org:
+ You can still get easy organization with headers, and they're collapsable
+ It's still easy to search for settings because all of them are in there
+ Documentation! For yourself; no pooint in being modular if there's nothing
  explaining what's going on.
+ Really easy to quickly /re-organise/ code!
+ Using :noexport:
  - The advantage of separate files is that you can selectively pick which one
    to load. (as opposed to comment out blocks of code in a big file, which is
    less easy to manage)

  The important thing is the ability to have an easily navigatable
  hierarchy. This' achievable with a nested directory/org-heading structure.

+ Really easy to delete content!
  - After a while, I come back and realise I've implemented something
    silly or that is avilable via MELPA, I can quickly delete it.
+ Many files requires coming up with descriptive file names.
  - Instead, prefer descriptive org headings ^_^
+ Multiple files ⇒ Makes it harder to remember which features live where.
  - Instead, have headings with an introducttory paragraph that
    explains the kind of features being considered ---or, lazily, look
    at the outlined view of subheadings to see what's there.
  - Harder to review the whole project, when its in pieces.

  Many small files is great for collobaration ---there'll likely  be less
  merge conflicts. However, this is a one-Emacsen project.

+ Using headings does not conflict with the Single Responsibility Principle nor
  of Separation of Concerns. ---This totally ignores the Interface Segregation
  Principle, but in the grand scheme of things, I'm happy this way and I like
  being happy.

+ Some programming languages perform better when there are many
  small files ---glaring at Agda here. Others have a bit of a
  cost to linking all the files together. There's no fast and hard
  rule it seems.

+ Programs are meant to be read by humans and only incidentally for computers to execute -- Donald Knuth.

+ Programs without documentation have no value;

  it's like a claim without evidence!

+ Herein, I'll aim to have source blocks that do not exceed 30 lines
  ---read more [[https://dzone.com/articles/rule-30-%E2%80%93-when-method-class-or][here]].
  This is more likely to ensure
  (possibly by extracting code into its own functions):
  The listing fits on one screen,
  avoiding deeply nested control structures,
  non repeating common logical patterns,
  increased confidence that the implementation meets the stated purpose.

+ I will prefix my local functions with, well, ~my/~.
  This way it's easy to see all my defined functions,
  and this way I cannot accidentally shadow existing utilities.

* Booting Up
:PROPERTIES:
:CUSTOM_ID: Booting-Up
:END:

Let's decide on where we want to setup our declarations for personalising Emacs
to our needs. Then, let's bootstrap Emacs' primitive packaging mechanism with a
slick interface ---which not only installs Emacs packages but also programs at
the operating system level, all from inside Emacs!  Finally, let's declare who
we are and use that to setup Emacs email service.

** =~/.emacs= vs. =init.org=

/Emacs is extenible/: When Emacs is started, it tried to load a user's Lisp
program known as a initialisation file which specfies how Emacs should look and
behave for you.  Emacs looks for the init file using the filenames =~/.emacs.el,
~/.emacs,= or =~/.emacs.d/init.el= ---it looks for the first one that exists, in
that order; at least it does so on my machine.  Below we'll avoid any confusion
by /ensuring/ that only one of them is in our system.  Regardless, execute =C-h o
user-init-file= to see the name of the init file loaded. Having no init file is
tantamount to have an empty init file.

+ One can read about the various Emacs initialisation files [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File][online]] or
  within Emacs by the sequence ~C-h i m emacs RET i init file RET~.
+ A /friendly/ tutorial on ‘beginning a =.emacs= file’ can be read
  [[https://www.gnu.org/software/emacs/manual/html_node/eintr/Beginning-init-File.html#Beginning-init-File][online]] or within Emacs by ~C-h i m emacs lisp intro RET i .emacs RET~.
+ After inserting some lisp code and saving, such as ~(set-background-color
  "salmon")~, one can load the changes with ~M-x eval-buffer~.
+ In a terminal, use ~emacs -Q~ to open emacs without any initialisation files.

# Emacs is a stateful Lisp-based machine!

Besides writing Lisp in an init file, one may use Emacs' customisation
interface, ~M-x customize~: Point and click to change Emacs to your needs. The
resulting customisations are, by default, automatically thrown into your init
file ---=~/.emacs= is created for you if you have no init file.  This interface is
great for beginners, but one major drawback is that it's a bit difficult to
share settings since it's not amicable to copy-pasting.
#
# Unless suggested otherwise, Emacs writes stuff to =~.emacs= automatically.

We shall use =~/.emacs.d/init.el= as the initialisation file so that /all/ of our
Emacs related files live in the /same/ directory: =~/.emacs.d/=.

A raw code file is difficult to maintain, especially for a /large/ system such as
Emacs. Instead, we're going with a ‘literate programming’ approach: The
intialisation configuration is presented in an essay fromat, along with headings
and subheadings, intended for consumption by humans such as myself, that,
incidentally, can be ‘tangled’ into a raw code file that is comprehensible by a
machine. We achieve this goal using [[#Life-within-Org-mode][org-mode]] ---/Emacs' killer app/--- which is
discussed in great detail later on.

*** /Adventure time!/ “Honey, where's my init?”

Let's use the three possible locations for the initialisation files
to explore how Emacs finds them. Make the following three files.

_~/.emacs.el_
#+BEGIN_SRC emacs-lisp :tangle no
;; Emacs looks for this first;
(set-background-color "chocolate3")
(message-box ".emacs.el says hello")
#+END_SRC
_~/.emacs_
#+BEGIN_SRC emacs-lisp :tangle no
;; else; looks for this one;
(set-background-color "plum4")
(message-box ".emacs says hello")
#+END_SRC
_~/.emacs.d/init.el_
#+BEGIN_SRC emacs-lisp :tangle no
;; Finally, if neither are found; it looks for this one.
(set-background-color "salmon")
(message-box ".emacs.d/init.el says hello")
#+END_SRC

Now restart your Emacs to see how there super tiny initilaisation files
affect your editor. Delete some of these files in-order for others to take effect!

*** /Adventure time!/ Using Emacs' Easy Customisation Interface

We have chosen not to keep configurations in ~~/.emacs~ since
Emacs may explicitly add, or alter, code in it.

Let's see this in action!

Execute the following to see additions to the ~~/.emacs~ have been added by
‘custom’.
 1. =M-x customize-variable RET line-number-mode RET=
 2. Then press: ~toggle~, ~state~, then ~1~.
 3. Now take a look: =C-x C-f ~/.emacs=

*** Support for ‘Custom’

Let the Emacs customisation GUI insert configurations into its own file, not
touching or altering my initialisation file.  For example, I tend to have local
variables to produce ~README.org~'s and other matters, so Emacs' Custom utility
will remember to not prompt me each time for the safety of such local variables.
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src

Speaking of local variables, let's always ones we've already marked as safe
---see the bottom of the source of this file for an example of local variables.
( At one point, all my files had locals! )
#+BEGIN_SRC emacs-lisp
(setq enable-local-variables :safe)
#+END_SRC

** =use-package= ---The start of =init.el=

There are a few ways to install packages ---run ~C-h C-e~ for a short overview.
The easiest, for a beginner, is to use the command ~package-list-packages~ then
find the desired package, press ~i~ to mark it for installation, then install all
marked packages by pressing ~x~.

+ /Interactively/:  ~M-x list-packages~ to see all melpa packages that can install
  - Press ~Enter~ on a package to see its description.
+ Or more quickly, to install, say, the haskell mode: ~M-x package-install RET
  unicode-fonts RET~.

“From rags to riches”: Recently I switched to Mac ---first time trying the OS.
I had to do a few ~package-install~'s and it was annoying.  I'm looking for the
best way to package my Emacs installation ---including my installed packages and
configuration--- so that I can quickly install it anywhere, say if I go to
another machine.  It seems ~use-package~ allows me to configure and auto install
packages.  On a new machine, when I clone my ~.emacs.d~ and start Emacs, on the
first start it should automatically install and compile all of my packages
through ~use-package~ when it detects they're missing.

First we load ~package~, the built-in package manager.  It is by default only
connected to the GNU ELPA (Emacs Lisp Package Archive) repository, so we
extended it with other popular repositories; such as the much larger [[https://melpa.org/#/][MELPA]]
(Milkypostman's ELPA) ---it builds packages [[https://github.com/melpa/melpa][directly from the source-code
reposistories of developers]], rather than having all packages in one repository.
#+BEGIN_SRC emacs-lisp
;; Make all commands of the “package” module present.
(require 'package)

;; Internet repositories for new packages.
(setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                         ("gnu"       . "http://elpa.gnu.org/packages/")
                         ("melpa"     . "http://melpa.org/packages/")
                         ("melpa-stable" . "http://stable.melpa.org/packages/")))

;; Actually get “package” to work.
(package-initialize)
(package-refresh-contents)
#+END_SRC

- All installed packages are placed, by default, in =~/.emacs.d/elpa=.
- *Neato:* /If one module requires others to run, they will be installed automatically./

:Faq:
If there are issues with loading the archives, say, "Failed to download ‘gnu’
archive."  then ensure you can both read and write, recursively, to your
.emacs.d/ E.g., within emacs try to execute (package-refresh-contents) and
you'll observe a permissions error.
:End:

The declarative configuration tool [[https://github.com/jwiegley/use-package/][use-package]] is a
macro/interface that manages other packages and the way they interact.
+ It allows us to tersely organise a package's configuration.
  - By default, ~(use-package foo)~ only loads a package, if it's on our system.
    * Use the standalone keyword ~:disabled~ to turn off loading
      a module that, say, you're not using anymore.
+ It is /not/ a package manger, but we can make it one by having it automatically
  install modules, via Emacs packing mechanism, when they're not in our system.

  We achieve this by using the keyword option ~:ensure t~.
+ Here are common keywords we will use, in super simplified terms.
  - ~:init   f₁ … fₙ~  /Always/ executes code forms ~fᵢ~ /before/ loading a package.
  - ~:diminish str~  Uses /optional/ string ~str~ in the modeline to indicate
                   this module is active. Things we use often needn't take
                   real-estate down there and so no we provide no ~str~.
  - ~:config f₁ … fₙ~ /Only/ executes code forms ~fᵢ~ /after/ loading a package.

    The remaining keywords only take affect /after/ a module loads.

  - ~:bind ((k₁ . f₁) … (kₙ . fₙ)~ Lets us bind keys ~kᵢ~, such as
    ~"M-s o"~, to functions, such as =occur=.
    * When /n = 1/, the extra outer parenthesis are not necessary.
  - ~:hook ((m₁ … mₙ) . f)~ Enables functionality ~f~ whenever we're in one of the
    modes ~mᵢ~, such as ~org-mode~. The ~. f~, along with the outermost parenthesis,
    is optional and defaults to the name of the package ---Warning: Erroneous
    behaviour happens if the package's name is not a function provided by the
    package; a common case is when package's name does /not/ end in ~-mode~,
    leading to the invocation ~((m₁ … mₙ) . <whatever-the-name-is>-mode)~ instead.
    # More generally, it let's us hook functions fᵢ, which may depend on the
    # current mode, to modules mᵢ.
    Additionally, when /n = 1/, the extra outer parenthesis are not necessary.

    Outside of =use-package=, one normally uses a ~add-hook~ clause.  Likewise, an
    ‘advice’ can be given to a function to make it behave differently ---this is
    known as ‘decoration’ or an ‘attribute’ in other languages.

  - ~:custom (k₁ v₁ d₁) … (kₙ vₙ dₙ)~ Sets a package's custom variables ~kᵢ~ to have
    values ~vᵢ~, along with /optional/ user documentation ~dᵢ~ to explain to yourself,
    in the future, why you've made this decision.

    This is essentially ~setq~ within ~:config~.

We now bootstrap ~use-package~.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC

We can now invoke ~(use-package XYZ :ensure t)~ which should check for the ~XYZ~
package and make sure it is accessible.  If not, the ~:ensure t~ part tells
~use-package~ to download it ---using the built-in ~package~ manager--- and place it
somewhere accessible, in =~/.emacs.d/elpa/= by default.  By default we would like
to download packages, since I do not plan on installing them manually by
downloading Lisp files and placing them in the correct places on my system.
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src
The use of ~:ensure t~ only installs absent modules, but it does no updating.
Let's set up [[https://github.com/rranelli/auto-package-update.el][an auto-update mechanism]].
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :config
  ;; Delete residual old versions
  (setq auto-package-update-delete-old-versions t)
  ;; Do not bother me when updates have taken place.
  (setq auto-package-update-hide-results t)
  ;; Update installed packages at startup if there is an update pending.
  (auto-package-update-maybe))
#+END_SRC

Here's another example use of ~use-package~.  Later on, I have a “show recent files
pop-up” command set to ~C-x C-r~; but what if I forget? This mode shows me all key
completions when I type ~C-x~, for example.  Moreover, I will be shown other
commands I did not know about! Neato :-)
#+BEGIN_SRC emacs-lisp
;; Making it easier to discover Emacs key presses.
(use-package which-key
  :diminish
  :config (which-key-mode)
          (which-key-setup-side-window-bottom)
          (setq which-key-idle-delay 0.05))
#+END_SRC
⟨ Honestly, I seldom even acknowledge this pop-up; but it's always nice to show
to people when I'm promoting Emacs. ⟩

Above, the ~:diminish~ keyword indicates that we do not want the mode's name to be
shown to us in the modeline ---the area near the bottom of Emacs.  It does so by
using the ~diminish~ package, so let's install that.
#+begin_src emacs-lisp
(use-package diminish
  :config ;; Let's hide some markers.
    (diminish 'eldoc-mode)
    (diminish 'org-indent-mode)
    (diminish 'subword-mode))
#+end_src

Here are other packages that I want to be installed onto my machine.
#+BEGIN_SRC emacs-lisp
;; Efficient version control.
(use-package magit
  :config (global-set-key (kbd "C-x g") 'magit-status))

(use-package htmlize)
;; Main use: Org produced htmls are coloured.
;; Can be used to export a file into a coloured html.

;; Quick BibTeX references, sometimes.
(use-package biblio)

;; Get org-headers to look pretty! E.g., * → ⊙, ** ↦ ◯, *** ↦ ★
;; https://github.com/emacsorphanage/org-bullets
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))

;; Haskell's cool
(use-package haskell-mode)

;; Lisp libraries with Haskell-like naming.
(use-package dash)    ;; “A modern list library for Emacs”
(use-package s   )    ;; “The long lost Emacs string manipulation library”.

;; Library for working with system files;
;; e.g., f-delete, f-mkdir, f-move, f-exists?, f-hidden?
(use-package f)
#+END_SRC

Note:
+ [[https://github.com/magnars/dash.el][dash]]: “A modern list library for Emacs”
  - E.g., ~(--filter (> it 10) (list 8 9 10 11 12))~
+ [[https://github.com/magnars/s.el][s]]: “The long lost Emacs string manipulation library”.
  - E.g., ~s-trim, s-replace, s-join~.

** ~README~ ---From ~init.org~ to ~init.el~

Rather than manually extracting the Lisp code from this literate document each
time we alter it, let's instead add a ‘hook’ ---a method that is invoked on a
particular event, in this case when we save the file.  More precisely, in this
case, ~C-x C-s~ is a normal save whereas ~C-u C-x C-s~ is a save after forming
~init.elc~ and ~README.md~.

#+name: enable making init and readme
#+BEGIN_SRC emacs-lisp :eval never-export
(defun my/make-init-el-and-README ()
    (interactive "P") ;; Places value of universal argument into: current-prefix-arg
    (when current-prefix-arg
      (let* ((time      (current-time))
                 (_date     (format-time-string "_%Y-%m-%d"))
                 (.emacs    "~/.emacs")
                 (.emacs.el "~/.emacs.el"))

        (save-excursion
          ;; remove any other initialisation file candidates
          (ignore-errors
            (f-move .emacs    (concat .emacs _date))
            (f-move .emacs.el (concat .emacs.el _date)))

          ;; Make init.el
          (org-babel-tangle)
          ; (byte-compile-file "~/.emacs.d/init.el")
          (load-file "~/.emacs.d/init.el")

          ;; Make README.org
          (org-babel-goto-named-src-block "make-readme")
          (org-babel-execute-src-block)

          ;; Acknowledgement
          (message "Tangled, compiled, and loaded init.el; and made README.md … %.06f seconds"
                   (float-time (time-since time)))))))

  (add-hook 'after-save-hook 'my/make-init-el-and-README nil 'local-to-this-file-please)
#+END_SRC

Where the following block has ~#+NAME: make-readme~ before it.
This source block generates the ~README~ for the associated Github repository.
#+NAME: make-readme
#+BEGIN_SRC emacs-lisp :tangle no :export_never t
;; Update the table of contents in this file.
(toc-org-mode)
(toc-org-insert-toc)
(save-buffer)
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.org

     # Logos and birthday present painting
# eval: (local-set-key (kbd "<f9>") (lambda () (interactive) (org-babel-goto-named-src-block "publish-to-blog") (org-babel-execute-src-block) (outline-hide-sublevels 1)))
# compile-command:  (progn (org-babel-tangle) (byte-compile-file "~/.emacs.d/init.el") (load-file "~/.emacs.d/init.el"))
# End:
